package main

/* Base Templates */

const BASE_TEMPLATE = `package {{.PackageName}}

/* *********************************************************** */
/* This file was automatically generated by pgtogogen.         */
/* Do not modify this file unless you know what you are doing. */
/* *********************************************************** */

import (
	"github.com/silviucm/pgx"	
	"errors"
	"log"
)

type ConditionTuple struct {
	Field string
	Value interface{}
}

// If this flag is set to true, the system will panic if the database
// connection cannot be made. Otherwise, GetDb() will simply return nil.
const FLAG_PANIC_ON_INIT_DB_FAIL bool = true

// variables that mimick the database driver standard errors, so
// we don't need to import that package in the generated table-to-struct files
// or any other package, such as pgx - the import would only reside here, in the base file

var ErrNoRows = pgx.ErrNoRows
var ErrDeadConn = pgx.ErrDeadConn
var ErrTxClosed = pgx.ErrTxClosed
var ErrNotificationTimeout = pgx.ErrNotificationTimeout

// Database settings variables, with initial, dummy values

var DB_HOST string = "localhost"
var DB_PORT uint16 = 5432
var DB_USER string = "testuser"
var DB_PASS string = "testuser"
var DB_NAME string = "testdb"
var DB_POOL_MAX_CONNECTIONS int = 100

// debug mode flag
var isDebugMode bool = false

var dbHandle *pgx.ConnPool

func GetDb() *pgx.ConnPool {
	
	if dbHandle != nil {
		return dbHandle
	}

	dbSettings := GetDefaultDbSettings()
	newHandle, err := InitDatabase(dbSettings)
	
	if err != nil {
		if FLAG_PANIC_ON_INIT_DB_FAIL {
			panic("FORCED PANIC: models.GetDb() -> InitDatabase() fatal error connecting to the database: " + err.Error())
		} else {
			return nil
		}
	}
	
	dbHandle = newHandle	
	return dbHandle
	
}

// Returns a ConnPoolConfig structure.
func GetDefaultDbSettings() pgx.ConnPoolConfig {
	
	var config pgx.ConnPoolConfig

	config.Host = DB_HOST
	config.User = DB_USER
	config.Password = DB_PASS
	config.Database = DB_NAME
	config.Port = DB_PORT
	config.MaxConnections = DB_POOL_MAX_CONNECTIONS
	
	return config
	
}

// Minimally, the pgx.ConnPoolConfig expects these values to be set:
//
// config.Host = dbHostStringVar
// config.User = dbUserStringVar
// config.Password = dbPassStringVar
// config.Database = dbNameStringVar
// config.Port = dbPortUInt16Var
//
// You can use the GetDefaultDbSettings() and modify the variables at the beginning
// of this class accordingly.
func InitDatabase(dbConfig pgx.ConnPoolConfig) (*pgx.ConnPool, error) {

	
	connPool, err := pgx.NewConnPool(dbConfig)
	if err != nil {
		return nil, NewModelsError("models.InitDatabase() -> pgx.NewConnPool", err)
		
	} 

	dbHandle = connPool
	return dbHandle, nil

}

func InitDatabaseMinimal(host string, port uint16, user, pass, dbName string, poolMaxConnections int) (*pgx.ConnPool, error) {

	DB_HOST = host
	DB_USER = user
	DB_PASS = pass
	DB_NAME = dbName
	DB_PORT = port
	DB_POOL_MAX_CONNECTIONS = poolMaxConnections
	
	return InitDatabase(GetDefaultDbSettings())

}

// Wraps an already existing error with a localized prefix
func NewModelsError(errorPrefix string, originalError error) error {
	return errors.New(errorPrefix + ": " + originalError.Error())
}

// Wraps local issues in an error format, without needing an already existing error
func NewModelsErrorLocal(errorPrefix string, localError string) error {
	return errors.New(errorPrefix + ": " + localError)
}

// Logs the message to the console 
func Debug(v ...interface{}) {
	if isDebugMode {
		log.Println(v)
	}
}

// Set the debug mode to true or false
func SetDebugMode(debugMode bool) {
	isDebugMode = debugMode
}

func IsDebugMode() bool  {
	return isDebugMode
}

func GetGoTypeForColumn(columnType string) (typeReturn string, goTypeToImport string) {

	typeReturn = ""
	goTypeToImport = ""

	switch columnType {
	case "character varying":
		typeReturn = "string"
	case "integer", "serial":
		typeReturn = "int32"
	case "boolean":
		typeReturn = "bool"
	case "uuid":
		typeReturn = "string"
	case "bigint":
		typeReturn = "int64"
	case "timestamp with time zone":
		typeReturn = "time.Time"
		goTypeToImport = "time"
	}

	return typeReturn, goTypeToImport
}
`
