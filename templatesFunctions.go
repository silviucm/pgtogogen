package main

const FUNCTION_TEMPLATE_PREFIX = `package {{.Options.PackageName}}

/* *********************************************************** */
/* This file was automatically generated by pgtogogen.         */
/* Do not modify this file unless you know what you are doing. */
/* *********************************************************** */

import (
	"github.com/silviucm/pgx"
	{{range $key, $value := .GoTypesToImport}}"{{$value}}"
	{{end}}	
)

// this is a dummy variable, just to use the pgx package
var pgxErrDeadConnFunc = pgx.ErrDeadConn

// Utility-oriented, internal type to allow a singleton structure that would hold static-like methods
// and global, single-instance settings
type tFunctionUtils struct {}

`

const FUNCTION_TEMPLATE = `{{$paramCount := len .Parameters}}
{{$functionName := .GoFriendlyName}}
// Wrapper over the function named {{.DbName}}
func (utilRef *tFunctionUtils) {{$functionName}}(` +
	`{{range $i, $e := .Parameters}}param{{.GoFriendlyName}} {{.GoType}}{{if ne (plus1 $i) $paramCount}},{{end}} {{end}})` +
	` ({{if not .IsReturnVoid}}returnVal {{if .IsReturnASet}}[]{{end}}{{.ReturnGoType}},{{end}} err error) {
						
	var errorPrefix = "tFunctionUtils.{{$functionName}}() ERROR: "
	
	currentDbHandle := GetDb()
	if currentDbHandle == nil {
		return {{if not .IsReturnVoid}}returnVal,{{end}} NewModelsErrorLocal(errorPrefix, "the database handle is nil")
	}	
	
	// define the exec query
	var queryParts []string
	
	queryParts = append(queryParts, "SELECT * FROM ")
	queryParts = append(queryParts, "{{.DbName}}")
	queryParts = append(queryParts, "( {{range $i, $e := .Parameters}}{{$e.DbName}} = ${{(plus1 $i)}}{{if ne (plus1 $i) $paramCount}},{{end}}{{end}} )")
	
	rows, err := currentDbHandle.Query(JoinStringParts(queryParts,""), {{range $i, $e := .Parameters}}param{{.GoFriendlyName}}{{if ne (plus1 $i) $paramCount}},{{end}} {{end}})
	
	if err != nil {
		return {{if not .IsReturnVoid}}returnVal,{{end}} NewModelsError(errorPrefix + " fatal error running the function statement:", err)
	}
	defer rows.Close()

	for rows.Next() {

	
	}
	err = rows.Err()
	if err != nil {
		return {{if not .IsReturnVoid}}returnVal,{{end}} NewModelsError(errorPrefix + " error during rows.Next() iterations:", err)
	}	
	
	return {{if not .IsReturnVoid}}returnVal,{{end}} nil
}

`
